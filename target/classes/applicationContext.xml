<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd"
>
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="com.wincom.Dao" />
    <context:component-scan base-package="com.wincom.service" />
    <!--    引入配置文件-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>
    <!--    dbcp数据源配置-->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <!--        初始化连接大小-->
        <property name="initialSize" value="${initialSize}"/>
        <!--        连接池最大数量-->
        <property name="maxTotal" value="${maxTotal}"/>
        <!--        连接池最大空闲-->
        <property name="maxIdle" value="${maxIdle}"/>
        <!--        连接池最小空闲-->
        <property name="minIdle" value="${minIdle}"/>
        <!--        获取连接最大等待时间-->
        <property name="maxWaitMillis" value="${maxWaitMillis}"/>
        <!--        事务是否自动提交-->
        <property name="defaultAutoCommit" value="true"/>
    </bean>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.qq.com"/>
        <property name="username" value="1065917052@qq.com"/>
        <property name="password" value="esunufiyxgflbbfg"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.ssl.enable">true</prop>
            </props>
        </property>
    </bean>

    <!--    spring 和 MyBatis的完美整合，不需要mybatis的配置映射文件-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--载入mybatis配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--        自动扫描mapping.xml配置文件-->
        <property name="mapperLocations" value="classpath:com/wincom/mapper/*.xml"/>
    </bean>

    <!--    Mapper接口调用方式要用，如果不用mapper接口方式采用实体dao，可以不配接口所在包名，
    spring会自动查找其下的类-->
    <!--    用实体dao需要注释掉，否则会报警告：No MyBatis mapper was found in-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
      <property name="basePackage" value="com.wincom.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
   </bean>
    <!-    采用实体dao调用方式要用，在dao里可以用注解@Resource(name="sqlSessionTemplate)方式得到
    或者用dao继承SqlSessionDaoSupport再采用setter方式对dao进行注入-->

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>
    <!--   (事务管理器)transaction manager,use JtaTansactionManagger for global tx-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--    AOP事务管理方法匹配规则-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--    AOP事务处理-->
    <aop:config>
        <aop:pointcut id="allServiceMethods" expression="execution(* com.wincom.service..*(..))"/>
        <aop:advisor pointcut-ref="allServiceMethods" advice-ref="txAdvice"/>
    </aop:config>

</beans>